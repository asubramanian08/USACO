jamboard link: https://jamboard.google.com/d/1mRJ0PkQ4h9Azh4kE3b7iGiwyM0IMSCqhU_fJnX2342M/edit?usp=sharing


Cowlphabet

Here, we use a DP approach where our state is DP[i][j][k] = number of words you can form with i upper case 
letters, j lower case letters, and with the last character being k. To prepare for transitions, we create 
an adjacency list from each character to characters which can precede it (for example, in our sample case 
a can come after b or A). Our transition itself looks something like this (iterating over all l in 
adjacent[k]):

dp[i][j][k] += dp[i-1][j][l] for all l lowercase

dp[i][j][k] += dp[i][j-1][l] for all l uppercase

Our answer will then be the sum of all elements in dp[0][0].


Farm Painting

In this problem, we'll use a sweep line approach. The key observation is that if we have a set of all 
"active" horizontal edges, which means horizontal edges of rectangles that aren't fully enclosed and have 
x-coordinates that are valid for our current position in the sweep line, a new rectangle is valid if and 
only if the horizontal edge right below its bottom edge is a bottom edge (as opposed to a top one). The 
implementation discussed in class uses a query of structure Q("Insert" or "Delete", x-coordinate, 
y-coordinate, "Bottom" or "Top") where lines of structure L(y-coordinate, "Bottom" or "Top") can be stored 
in the set. Then, using a lower_bound or floor operation, we can find the line right below in O(log n) 
time making our solution O(N log N).


Radio Contact 

This is a classic dynamic programming problem. We'll have a state min_cost(A,B) which is the min_cost to 
get to the end, given that Farmer John has traveled A steps and Bessie has traveled B steps. Our base case 
is, if A == N and B == M, then we're at our final state and we only have to expend the energy needed to 
activate the radio at our final stage. Otherwise, given that, at each time step, Bessie, Farmer John, or 
both make a step we have three cases:

min_cost(A,B) = energy(posFJ[A],posBessie[B]) + min (

  min_cost(A+1,B),

  min_cost(A,B+1),

  min_cost(A+1,B+1)

)

Our answer can then be derived from min_cost(0,0). Obviously, we need to also make sure that A <= N and 
B <= M to make sure we don't make invalid steps. There are O(NM) states so our runtime is O(NM).


Unlocking Blocks

This problem has very small bounds so we can pretty much brute force it with a BFS. The implementation is 
pretty annoying, but at a high-level, we think of the board as a graph where nodes represent states and 
edges represent moves (which turns out to be reasonably small). There are many ways to code this, but one 
is to store each object as a list of x and y-coordinates. The transitions/slides are just incrementing one 
of these coordinates. For each transition, we must also check if it is a target state (there are no 
touching edges) and if it's valid (making sure nothing overlaps). Especially with the small bounds, brute 
force solutions for these checks are fine.



Trick or Treat on the Farm

We can first convert this problem into a graph where the outgoing edge from each node i is the given 
next_i. Here, we notice two things:

1. If there is a cycle, the output for each node in that cycle is the size of the cycle

2. For nodes outside the cycle, the output is the distance to the cycle

Now, all that is left to do is implement a way to find the cycles within the graph. This can be done with 
a simple DFS with slight modification (such as returning not only distance, but also whether or not we're 
in a cycle). There are many possible implementations for this problem, so feel free to do whatever you're 
comfortable with.


Artificial Lake

We can solve this problem by representing the artificial lake as a doubly-linked list (which supports fast 
removal operations). For each node, we maintain the width of the current section as well as the elevation. 
We then basically run a simulation, filling up the deepest part of the lake, then basically combining that 
node with the neighbors whose height itâ€™s reached. Then you find where the water you were pouring overflows 
to and fill up that node, repeating the process until the entire lake is filled.


Cokolade

There are a lot of observations to make for this problem, but the major one is that, especially for large 
numbers of candies there are many contiguous days in which the participants on a certain table get the same 
amount of candies. It turns out that the number of times the amount of candies participants at a table get 
changes on O(sqrt(total candies)) days. Using some math, we can compute the formula to find these "change 
days." This motivates a sort of sweep line approach where we essentially simulate the problem but only 
consider the days where at least one of the tables starts receiving a different amount of candies. 
Calculating the group sizes is made easier by sorting the input. 