jamboard links:
https://jamboard.google.com/d/1WAcgWBF5I1W2scOfODnZzasonecVwCUfnJSXQ4dbkkI/edit?usp=sharing
https://jamboard.google.com/d/1NbI69192Tn6rq8v2n5bMQ53DLdHNzBtLfYrSo3Iw4XY/edit?usp=sharing


Haywire

Since the bounds for N are very small, we can mostly just brute force this problem. The way we'd 
accomplish that is by just using a DFS to search through all permutations for assignments. However, this 
by itself is too slow so we prune our search by halting it at any point where our current permutation has 
a higher cost than the best permutation we've seen until that point.


Mootube

Here we'll exploit the fact that our queries are answered offline. First, store all the nodes as 
individual components in a DSU structure. Sort the queries in descending order of k-value. Then, for every 
query, we will first iterate through all edges with relevance value >= K_i and do a union between their 
two adjacent nodes. Then, we just query the size of the component with V_i and set the answer to that 
query to the size - 1.


Cowpatibility

The major idea behind this is inclusion/exclusion. With a map data structure, we can store the number of 
cows that like flavor i, the number of cows that like flavor i and j, the number of cows that like the 
flavors i, j, and k, etc for all i,j,k,etc.. Then as we iterate through the cows, using 
inclusion/exclusion, we can count the total number of cows which share flavor interests in O(1) time since 
we only need to look at the size of 31 intersection set sizes.


Perimeter

First, lets store all the points in a set so that we can query whether or not a coordinate has a haybale 
efficiently. Then, we start a place which is guaranteed to be on the perimeter (for example, the top of 
the hay bale with the highest y-coordinate). We traverse around the perimeter by following these rules in 
the given priority:

1. If a haybale allows you to turn right, turn right

2. If a haybale allows you to go forward, go forward

3. Go left

We should end up back where we started in O(N) moves, so, assuming our set is O(log N), we'd have an O(N 
log N) time.


Bookshelf

This is another DP problem. We set our DP state to DP[i] is the minimum height of making a bookshelf with 
the first i books. Our transition is DP[i] = min(DP[k] + max height of books k+1...i) given that sum of 
widths of books k+1...i <= L. With careful iteration of k (from i-1 to 0), this can be accomplished in our 
desired runtime of O(N^2)


Milk Visits

We DFS through the nodes, maintaining stacks of the ancestors for each milk type. Then, at each endpoint 
for all the queries, we check whether the lowest ancestor with the desired milk type is at or below the 
LCA of the query's two endpoints. We do so by checking whether it is an ancestor of the other endpoint--if 
it's not then, it must be on the path between the two, and if it is, we just have to check if it's the LCA 
which is the only common ancestor on the path between the two.

Balanced Cow Breeds

For this problem, it's easier to think of it in a 3D DP solution where DP[i][j][k] represents the total number of 
ways to use the first i parentheses with j unmatched G's and k unmatched H's. In this case DP[0][0][0] will be 
our base case. Then, we add the value of DP[i][j][k] to DP[i+1][j+1][k] and DP[i+1][j][k+1] if we have an open 
parenthesis and DP[i+1][j-1][k] and DP[i+1][j][k-1] if have a close one. We then also realize that k can be 
uniquely determined from i,j, and the input so we don't need that dimension, giving us an O(N^2) algorithm.