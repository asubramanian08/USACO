jamboard links:
https://jamboard.google.com/d/19dhe2MYMXQgD_GuAf_TzY7Y_wXDSYc7lbq1noxUJfXo/edit?usp=sharing
https://jamboard.google.com/d/1y8uz1_K22mm_9nos4aNlHoPzLSil2lp2939JO7A-vq8/edit?usp=sharing


Bessie Slows Down

If we knew the order of the queries, the problem just becomes some basic algebra, updating the distance, 
time, and speed between each query. We unfortunately don't know the ordering of the distance and time 
queries though. To solve this, we sort both types of queries (knowing that T x will come before T y if 
x < y and similar for D queries). Then we proceed with a merge sort like operation, checking if the first 
element of T or D comes first, processing it, then popping it and repeating.


Fine Dining

First, we use Dijkstras to compute the distance from the barn to each pasture without considering the 
haybales in O(M log N) time. Then we create a modified graph which now has an "End" node. The edges 
connected to it are directed edges to the pastures with haybales. Let H be a pasture with X haybales and a 
shortest distance of Y from the barn. The weight to the "End" node should then be Y - X. The shortest path 
from each node to the end node will now be the best case of distance - haybales. Comparing this with the 
original distance, we can see if each cow can get haybales.


Running Laps

If we define l(i) as the number of laps cow i completes (which doesn't have to be an integer, for example, 
a cow can complete 1.5 laps). We notice that the number of times cow j overtimes cow i is 
floor(l(j) - l(i)) if l(j) > l(i). Hence our final answer will be sum(floor(l(j) - l(i))) for all j > i if 
the cows are sorted in ascending order of speed. This takes O(N^2) time to compute, so we try to simplify 
this problem to sum(floor(l(j)) - floor(l(i))) which can be computed in linear time using prefix sums. This
doesn't exactly equal the original expression we were trying to compute and we can notice that the 
difference is exactly the number of inversions for the fractional part of the sorted list of l(i)'s. So, 
subtracting that number (which can be computed using Fenwick Trees), we obtain our final answer.


Umbrellas for Cows

First, we precompute the minimum cost D of covering an interval of length at least l. We can do this very 
simply by maintaining a running minimum while iterating backwards through C. Then we use the DP state 
DP[i] = cost of covering first i cows, with the transition DP[i] = min(DP[k] + C[X[i] - X[k+1] + 1]) over 
all k < i. This intuitively means covering the first K cows in whatever optimal way and then adding on a 
singular umbrella to cover cows k+1 to i.


Surround the Islands

This problem has fairly small bounds but requires a lot of care in implementing. Essentially, we first 
have to actually arrange the vertices into islands. There's various ways to geometrically accomplish that. 
Then, we can turn it into a graph problem where the adjacency matrix can be derived from the one that 
gives with the additional constraint that the island must be fenced all together. With this, we use any 
shortest path algorithm to compute our answer.


Secret Code

This is another problem with very small bounds. Here we can actually get away with using a DP state which 
is a map instead of an array where DP[S] -> number of possible starting strings given encrypted string S. 
We then search over the four possible combinations of operations (shorten at end, append at beginning OR 
shorted at beginning append at end OR etc.) and see which substrings could be valid starting words. We then 
recurse on those and take the sum.


Kruznice

The first thing to observe here is that most circles will just add one to the total number of disjoint 
areas. The only circles that won't do this are ones that are completely "blocked" with two or more circles 
within them spanning the entire diameter. We therefore just need to calculate which of the circles satisfy 
this condition. This can be done with a sweep line over the x-axis, sorting insert and delete queries 
first by their x-coordinate and then by their radius. Maintaining a stack of the most recently added 
circles, we can mark a circle as "not blocked" if its ever at the top of the stack when our sweep line 
travels a non-zero distance.